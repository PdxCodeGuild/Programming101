'''
Programming 101
Unit 1 Review
'''
'''
Multi-line comment
with single quotes
'''
"""
multi-line comment 
with double quotes
"""
'''
Comments
- organize code
- explain code
- exclude lines of code for testing
'''
# ------------------------------------------------------------------------------------- #
# a function is a named piece of code that performs a specific task
# print(data) - display the data in the terminal
# functions need parentheses after their name to be executed
# print('hello')
# print() #blank line
# print('world')
# print() can accept multiple, comma-separated items
# they will print with a space between each
# print('cat', 'dog', 'elephant') # cat dog elephant
# print(100, 'dog', 1.5) # 100 dog 1.5
# label some data
# print('pi:', 3.141592654) # pi: 3.141592654
# -------------------------------------------------------------------------------------------- #
# Datatype: string (str)
# strings are sequences of textual characters surrounded by quotes
"cat"
'dog'
'iuy62t3ghb2k3jh9862389(*^(*^'
"... an entire book ... "
'' # empty string
"" # empty string
' ' # symbol of a space
" " # symbol of a space
# ---------------------------------------------------------------------------------------- #
# type(object) - return the datatype of the object
# everything in Python is an object
# print(type('')) # <class 'str'>
# print(type('3.14')) # <class 'str'>
# print(type(3)) # <class 'int'>
# ------------------------------------------------------------------------------------------ #
# print a multi-line string
"""
print('''
Multi-line comments      
    are also
        multi-line strings
''')
"""
# ------------------------------------------------------------------------------------------- #
# concatenation - adding strings together to form a single string
# print('pdx' + 'code' + 'guild') # pdxcodeguild
# print('pdx' + ' ' + 'code' + ' ' + 'guild') # pdx code guild
# --------------------------------------------------------------------------------------------- #
# a "method" is a function that manipulates only the object to which it belongs
# an object's methods are accessed with a dot . after the object
# .upper() - return an uppercase version of the string
# print('abcd'.upper()) # ABCD
# .replace(old_str, new_str) - replace all occurrences of the old_str with the new_str
# print('hello'.replace('h', 'j'))
# methods can be chained
# each subsequent method will operate on the return value of the previous
# call .upper() on the string returned by .replace()
# print('jello'.upper().replace('h')) # JELLO
# -------------------------------------------------------------------------------------------- #
# Escape Characters
# denoted with a backslash \ before the character
# allow characters to be placed within a string that would normally cause errors
# allow formatting of strings
# other uses...
# Python uses quotation marks to begin and end strings
# "Hello "world"" # Error! Double quotes cancel each other
# Solution 1: use mismatched sets
# print("Hello 'world'") # Hello "world"
# Solution 2: escape characters
# print("Hello \"world\"") # Hello "world"
# escape characters can also format strings
# print("A\nB\nC") # \n - new line character
# print("A\tB\tC") # \t - horizontal tab character
